// <auto-generated />
using System;
using Manga.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manga.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MangaContext))]
    [Migration("20240417082409_AddAlbum")]
    partial class AddAlbum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Manga.Infrastructure.Entities.Album", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CoverImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.AlbumManga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("AddedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("MangaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("MangaId");

                    b.ToTable("AlbumsMangas");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("HasComment")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MangaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("NumberOfChapter")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PublishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ThumbnailImage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("ChapterComments");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterCommentReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChapterCommentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChapterCommentId");

                    b.ToTable("ChapterCommentReactions");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("ChapterImages");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Manga", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("AmountOfReadings")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("HasAdult")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long?>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Preface")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.MangaGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("MangaId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangasGenres");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.MangaInteraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterId")
                        .HasColumnType("bigint");

                    b.Property<string>("InteractionType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("MangaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MangaId");

                    b.ToTable("MangaInteractions");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.AlbumManga", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.Album", "Album")
                        .WithMany("AlbumsMangas")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manga.Infrastructure.Entities.Manga", "Manga")
                        .WithMany("AlbumsMangas")
                        .HasForeignKey("MangaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Chapter", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.Manga", "Manga")
                        .WithMany("Chapters")
                        .HasForeignKey("MangaId");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterComment", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.Chapter", "Chapter")
                        .WithMany("ChapterComments")
                        .HasForeignKey("ChapterId");

                    b.HasOne("Manga.Infrastructure.Entities.ChapterComment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId");

                    b.Navigation("Chapter");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterCommentReaction", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.ChapterComment", "ChapterComment")
                        .WithMany("ChapterCommentReactions")
                        .HasForeignKey("ChapterCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChapterComment");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterImage", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.Chapter", "Chapter")
                        .WithMany("ChapterImages")
                        .HasForeignKey("ChapterId");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.MangaGenre", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.Genre", "Genre")
                        .WithMany("MangasGenres")
                        .HasForeignKey("GenreId")
                        .IsRequired();

                    b.HasOne("Manga.Infrastructure.Entities.Manga", "Manga")
                        .WithMany("MangasGenres")
                        .HasForeignKey("MangaId")
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.MangaInteraction", b =>
                {
                    b.HasOne("Manga.Infrastructure.Entities.Chapter", "Chapter")
                        .WithMany("MangaInteractions")
                        .HasForeignKey("ChapterId");

                    b.HasOne("Manga.Infrastructure.Entities.Manga", "Manga")
                        .WithMany("UserMangaInteractions")
                        .HasForeignKey("MangaId");

                    b.Navigation("Chapter");

                    b.Navigation("Manga");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Album", b =>
                {
                    b.Navigation("AlbumsMangas");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Chapter", b =>
                {
                    b.Navigation("ChapterComments");

                    b.Navigation("ChapterImages");

                    b.Navigation("MangaInteractions");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.ChapterComment", b =>
                {
                    b.Navigation("ChapterCommentReactions");

                    b.Navigation("InverseParentComment");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Genre", b =>
                {
                    b.Navigation("MangasGenres");
                });

            modelBuilder.Entity("Manga.Infrastructure.Entities.Manga", b =>
                {
                    b.Navigation("AlbumsMangas");

                    b.Navigation("Chapters");

                    b.Navigation("MangasGenres");

                    b.Navigation("UserMangaInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
